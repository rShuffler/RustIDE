use eframe::egui;
use rfd::FileDialog; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FileDialog
use std::fs; 

pub struct MyIde {
    code: String,
    output: String,
    file_path: Option<String>, // –ü—É—Ç—å –∫ –æ—Ç–∫—Ä—ã—Ç–æ–º—É —Ñ–∞–π–ª—É
}

impl Default for MyIde {
    fn default() -> Self {
        Self {
            code: String::new(),
            output: String::from("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥."),
            file_path: None, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Ç—å –ø—É—Å—Ç–æ–π
        }
    }
}

impl eframe::App for MyIde {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, CTRL+S)
        if ctx.input(|i| i.key_pressed(egui::Key::S) && i.modifiers.ctrl) {
            if let Some(path) = &self.file_path {
                if let Err(e) = fs::write(path, &self.code) {
                    self.output = format!("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {}", e);
                } else {
                    self.output = format!("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {}", path);
                }
            } else {
                self.output = "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.".to_string();
            }
        }

        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.label("üî∑ Rust IDE");
                ui.separator();
                if ui.button("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª").clicked() {
                    if let Some(path) = FileDialog::new().pick_file() {
                        if let Ok(contents) = fs::read_to_string(&path) {
                            self.code = contents;
                            self.file_path = Some(path.to_string_lossy().to_string()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
                        }
                    }
                }
                if ui.button("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å").clicked() {
                    self.output = "–ó–∞–ø—É—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...".to_string();
                }
            });
        });

        // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å–ª–µ–≤–∞)
        egui::SidePanel::left("side_panel")
            .resizable(true)
            .default_width(150.0)  // –®–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏
            .show(ctx, |ui| {
                ui.heading("–§–∞–π–ª—ã");
                ui.separator();
                ui.label("üìÑ main.rs");
                ui.label("üìÑ test.rs");
            });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical(|ui| {
                ui.label("–ö–æ–¥:");
                ui.add_sized([ui.available_width(), 300.0], egui::TextEdit::multiline(&mut self.code));
                ui.separator();
                ui.label("–¢–µ—Ä–º–∏–Ω–∞–ª:");
                ui.add_sized([ui.available_width(), 150.0], egui::TextEdit::multiline(&mut self.output));
            });
        });
    }
}
