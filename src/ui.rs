use eframe::egui;
use rfd::FileDialog; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FileDialog
use std::fs;

pub struct MyIde {
    code: String,
    output: String,
    file_path: Option<String>, // –ü—É—Ç—å –∫ –æ—Ç–∫—Ä—ã—Ç–æ–º—É —Ñ–∞–π–ª—É
    is_dark_mode: bool, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    transition_progress: f32, // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ—Ö–æ–¥–∞ (–æ—Ç 0 –¥–æ 1)
}

impl Default for MyIde {
    fn default() -> Self {
        Self {
            code: String::new(),
            output: String::from("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥."),
            file_path: None, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Ç—å –ø—É—Å—Ç–æ–π
            is_dark_mode: true, // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            transition_progress: 0.0, // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ—Ö–æ–¥–∞
        }
    }
}

impl eframe::App for MyIde {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        if ctx.input(|i| i.key_pressed(egui::Key::T) && i.modifiers.ctrl) {
            self.is_dark_mode = !self.is_dark_mode;
            self.transition_progress = 0.0; // –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            ctx.request_repaint(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        if self.transition_progress < 1.0 {
            self.transition_progress += 0.05; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ—Ö–æ–¥–∞
            if self.transition_progress > 1.0 {
                self.transition_progress = 1.0;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–æ–≤
            let visuals = if self.is_dark_mode {
                egui::Visuals::dark()
            } else {
                egui::Visuals::light()
            };
            ctx.set_visuals(egui::Visuals {
                dark_mode: self.is_dark_mode,
                ..visuals
            });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, CTRL+S) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if ctx.input(|i| i.key_pressed(egui::Key::S) && i.modifiers.ctrl) {
            self.save_file();
        }

        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.label("üî∑ Rust IDE");
                ui.separator();
                if ui.button("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª").clicked() {
                    if let Some(path) = FileDialog::new().pick_file() {
                        if let Ok(contents) = fs::read_to_string(&path) {
                            self.code = contents;
                            self.file_path = Some(path.to_string_lossy().to_string()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
                        }
                    }
                }
                if ui.button("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å").clicked() {
                    self.output = "–ó–∞–ø—É—Å–∫ (–∑–∞–≥–ª—É—à–∫–∞)...".to_string();
                }

                if ui.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                    self.save_file();
                }

                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
                if ui.button(if self.is_dark_mode { "üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" } else { "üåú –¢—ë–º–Ω–∞—è —Ç–µ–º–∞" }).clicked() {
                    self.is_dark_mode = !self.is_dark_mode;
                    self.transition_progress = 0.0; // –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                    ctx.request_repaint(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É
                }
            });
        });

        // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å–ª–µ–≤–∞)
        egui::SidePanel::left("side_panel")
            .resizable(true)
            .default_width(150.0)  // –®–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏
            .show(ctx, |ui| {
                ui.heading("–§–∞–π–ª—ã");
                ui.separator();
                ui.label("üìÑ main.rs");
                ui.label("üìÑ test.rs");
            });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical(|ui| {
                ui.label("–ö–æ–¥:");
                ui.add_sized([ui.available_width(), 300.0], egui::TextEdit::multiline(&mut self.code));
                ui.separator();
                ui.label("–¢–µ—Ä–º–∏–Ω–∞–ª:");
                ui.add_sized([ui.available_width(), 150.0], egui::TextEdit::multiline(&mut self.output));
            });
        });
    }
}

impl MyIde {
    fn save_file(&mut self) {
        if let Some(path) = &self.file_path {
            if let Err(e) = fs::write(path, &self.code) {
                self.output = format!("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {}", e);
            } else {
                self.output = format!("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {}", path);
            }
        } else {
            self.output = "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.".to_string();
        }
    }
}
